// Generated by @wagmi/cli@0.1.10 on 3/4/2023 at 2:18:21 AM
import {
  useNetwork,
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AttestationStation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export const attestationStationABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "about",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "key", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "val", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "AttestationCreated",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_attestations",
        internalType: "struct AttestationStation.AttestationData[]",
        type: "tuple[]",
        components: [
          { name: "about", internalType: "address", type: "address" },
          { name: "key", internalType: "bytes32", type: "bytes32" },
          { name: "val", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "attest",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_about", internalType: "address", type: "address" },
      { name: "_key", internalType: "bytes32", type: "bytes32" },
      { name: "_val", internalType: "bytes", type: "bytes" },
    ],
    name: "attest",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes32", type: "bytes32" },
    ],
    name: "attestations",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
] as const;

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export const attestationStationAddress = {
  10: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77",
  420: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77",
  31337: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77",
} as const;

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export const attestationStationConfig = {
  address: attestationStationAddress,
  abi: attestationStationABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "increment",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "number",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newNumber", internalType: "uint256", type: "uint256" }],
    name: "setNumber",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Semver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semverABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_major", internalType: "uint256", type: "uint256" },
      { name: "_minor", internalType: "uint256", type: "uint256" },
      { name: "_patch", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MyToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const myTokenABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "initialSupply", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FixedPointMathLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fixedPointMathLibABI = [] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Velo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const veloABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
      { name: "_decimals", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeTransferLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeTransferLibABI = [] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VeloVault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const veloVaultABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_owner", internalType: "address", type: "address" },
      { name: "_underlying", internalType: "contract ERC20", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
      { name: "_VeloAddress", internalType: "address", type: "address" },
      { name: "_VoterAddress", internalType: "address", type: "address" },
      {
        name: "_VotingEscrowAddress",
        internalType: "address",
        type: "address",
      },
      {
        name: "_RewardsDistributorAddress",
        internalType: "address",
        type: "address",
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ClaimedBribes",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ClaimedFees",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "id",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false,
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ClaimedRebases",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "assets",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "shares",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Deposit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "lockedAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "lockDuration",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "GenerateVeNFT",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "NFTVoted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "lockDuration",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RelockVeNFT",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RemoveExcessTokens",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "receiver",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "assets",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "shares",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Withdraw",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "WithdrawVeNFT",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "asset",
    outputs: [{ name: "", internalType: "contract ERC20", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_bribes", internalType: "address[]", type: "address[]" },
      { name: "_tokens", internalType: "address[][]", type: "address[][]" },
      { name: "_tokenIds", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "claimBribesMultiNFTs",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_fees", internalType: "address[]", type: "address[]" },
      { name: "_tokens", internalType: "address[][]", type: "address[][]" },
      { name: "_tokenIds", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "claimFeesMultiNFTs",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenIds", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "claimRebaseMultiNFTs",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "convertToAssets",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "convertToShares",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "deposit",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenAmount", internalType: "uint256", type: "uint256" },
      { name: "_lockDuration", internalType: "uint256", type: "uint256" },
    ],
    name: "lockVELO",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "maxDeposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "maxMint",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "maxRedeem",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "maxWithdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "shares", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "mint",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_operator", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" },
      { name: "_data", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC721Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewDeposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "previewMint",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "previewRedeem",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewWithdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "shares", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "redeem",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_NFTId", internalType: "uint256", type: "uint256" },
      { name: "_lockDuration", internalType: "uint256", type: "uint256" },
    ],
    name: "relockVELO",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokens", internalType: "address[]", type: "address[]" },
      { name: "_amounts", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "removeERC20Tokens",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "rewardsDistributor",
    outputs: [
      {
        name: "",
        internalType: "contract IRewardsDistributor",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalAssets",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "_indexes", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "transferNFTs",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "veNFTIds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "velo",
    outputs: [{ name: "", internalType: "contract ERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_NFTIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "_poolVote", internalType: "address[]", type: "address[]" },
      { name: "_weights", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "vote",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "voter",
    outputs: [{ name: "", internalType: "contract IVoter", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "votingEscrow",
    outputs: [
      { name: "", internalType: "contract IVotingEscrow", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_index", internalType: "uint256", type: "uint256" },
    ],
    name: "withdrawNFT",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC4626
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc4626ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "assets",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "shares",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Deposit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "receiver",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "assets",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "shares",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Withdraw",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "asset",
    outputs: [{ name: "", internalType: "contract ERC20", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "convertToAssets",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "convertToShares",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "deposit",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "maxDeposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "maxMint",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "maxRedeem",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "maxWithdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "shares", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
    ],
    name: "mint",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewDeposit",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "previewMint",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
    name: "previewRedeem",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
    name: "previewWithdraw",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "shares", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "redeem",
    outputs: [{ name: "assets", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalAssets",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "assets", internalType: "uint256", type: "uint256" },
      { name: "receiver", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [{ name: "shares", internalType: "uint256", type: "uint256" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CommonBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const commonBaseABI = [] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ScriptBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const scriptBaseABI = [] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testBaseABI = [] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdChains
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdChainsABI = [] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRewardsDistributor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRewardsDistributorABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenIds", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "claim_many",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVoter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVoterABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "_ve",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "attachTokenToGauge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_bribes", internalType: "address[]", type: "address[]" },
      { name: "_tokens", internalType: "address[][]", type: "address[][]" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "claimBribes",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_fees", internalType: "address[]", type: "address[]" },
      { name: "_tokens", internalType: "address[][]", type: "address[][]" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "claimFees",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "detachTokenFromGauge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_gauge", internalType: "address", type: "address" }],
    name: "distribute",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "emergencyCouncil",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "emitDeposit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "emitWithdraw",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "pool", internalType: "address", type: "address" }],
    name: "gauges",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "governor",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "isWhitelisted",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "notifyRewardAmount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_tokenId", internalType: "uint256", type: "uint256" }],
    name: "reset",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "_poolVote", internalType: "address[]", type: "address[]" },
      { name: "_weights", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "vote",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Owned
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownedABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotingEscrow
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotingEscrowABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "abstain",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "attach",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "balanceOfNFT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "checkpoint",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_value", internalType: "uint256", type: "uint256" },
      { name: "_lock_duration", internalType: "uint256", type: "uint256" },
    ],
    name: "create_lock",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "create_lock_for",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    name: "deposit_for",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "detach",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "epoch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "lock_duration", internalType: "uint256", type: "uint256" },
    ],
    name: "increase_unlock_time",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "isApprovedOrOwner",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "loc", internalType: "uint256", type: "uint256" }],
    name: "point_history",
    outputs: [
      {
        name: "",
        internalType: "struct IVotingEscrow.Point",
        type: "tuple",
        components: [
          { name: "bias", internalType: "int128", type: "int128" },
          { name: "slope", internalType: "int128", type: "int128" },
          { name: "ts", internalType: "uint256", type: "uint256" },
          { name: "blk", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "team",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "token",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "user_point_epoch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "loc", internalType: "uint256", type: "uint256" },
    ],
    name: "user_point_history",
    outputs: [
      {
        name: "",
        internalType: "struct IVotingEscrow.Point",
        type: "tuple",
        components: [
          { name: "bias", internalType: "int128", type: "int128" },
          { name: "slope", internalType: "int128", type: "int128" },
          { name: "ts", internalType: "uint256", type: "uint256" },
          { name: "blk", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "voting",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_tokenId", internalType: "uint256", type: "uint256" }],
    name: "withdraw",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721TokenReceiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721TokenReceiverABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC721Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "owner", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockErc20ABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
      { name: "_decimals", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockErc721ABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "owner", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeMint",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeMint",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link attestationStationABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStation(
  config: Omit<UseContractConfig, "abi" | "address"> & {
    chainId?: keyof typeof attestationStationAddress;
  } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContract({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    ...config,
  });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationStationABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof attestationStationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof attestationStationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    ...config,
  } as UseContractReadConfig<typeof attestationStationABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"attestations"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationAttestations<
  TSelectData = ReadContractResult<
    typeof attestationStationABI,
    "attestations"
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof attestationStationABI,
      "attestations",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    functionName: "attestations",
    ...config,
  } as UseContractReadConfig<typeof attestationStationABI, "attestations", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"version"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationVersion<
  TSelectData = ReadContractResult<typeof attestationStationABI, "version">,
>(
  config: Omit<
    UseContractReadConfig<typeof attestationStationABI, "version", TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    functionName: "version",
    ...config,
  } as UseContractReadConfig<typeof attestationStationABI, "version", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationStationABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof attestationStationAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof attestationStationABI, string>["abi"],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<
        TMode,
        typeof attestationStationABI,
        TFunctionName
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof attestationStationABI, TFunctionName>({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"attest"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationAttest<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof attestationStationAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof attestationStationABI,
          "attest"
        >["abi"],
        "attest"
      > & {
        address?: `0x${string}`;
        chainId?: TChainId;
        functionName?: "attest";
      }
    : UseContractWriteConfig<TMode, typeof attestationStationABI, "attest"> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "attest";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<TMode, typeof attestationStationABI, "attest">({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    functionName: "attest",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationStationABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function usePrepareAttestationStationWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationStationABI, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationStationABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"attest"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function usePrepareAttestationStationAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationStationABI, "attest">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    functionName: "attest",
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationStationABI, "attest">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationStationABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof attestationStationABI, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof attestationStationABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationStationABI}__ and `eventName` set to `"AttestationCreated"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationAttestationCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationStationABI, "AttestationCreated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    eventName: "AttestationCreated",
    ...config,
  } as UseContractEventConfig<typeof attestationStationABI, "AttestationCreated">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounter(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: counterABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 */
export function useCounterNumber<
  TSelectData = ReadContractResult<typeof counterABI, "number">,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, "number", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    functionName: "number",
    ...config,
  } as UseContractReadConfig<typeof counterABI, "number", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof counterABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof counterABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof counterABI, TFunctionName>({
    abi: counterABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof counterABI, "increment">["abi"],
        "increment"
      > & { functionName?: "increment" }
    : UseContractWriteConfig<TMode, typeof counterABI, "increment"> & {
        abi?: never;
        functionName?: "increment";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof counterABI, "increment">({
    abi: counterABI,
    functionName: "increment",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof counterABI, "setNumber">["abi"],
        "setNumber"
      > & { functionName?: "setNumber" }
    : UseContractWriteConfig<TMode, typeof counterABI, "setNumber"> & {
        abi?: never;
        functionName?: "setNumber";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof counterABI, "setNumber">({
    abi: counterABI,
    functionName: "setNumber",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, "increment">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: "increment",
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, "increment">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, "setNumber">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: "setNumber",
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, "setNumber">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    ...config,
  } as UseContractEventConfig<typeof counterABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCounterTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof counterABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof counterABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link semverABI}__.
 */
export function useSemver(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: semverABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semverABI}__.
 */
export function useSemverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: semverABI, ...config } as UseContractReadConfig<
    typeof semverABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semverABI}__ and `functionName` set to `"version"`.
 */
export function useSemverVersion<
  TSelectData = ReadContractResult<typeof semverABI, "version">,
>(
  config: Omit<
    UseContractReadConfig<typeof semverABI, "version", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: semverABI,
    functionName: "version",
    ...config,
  } as UseContractReadConfig<typeof semverABI, "version", TSelectData>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20DomainSeparator<
  TSelectData = ReadContractResult<typeof erc20ABI, "DOMAIN_SEPARATOR">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "DOMAIN_SEPARATOR", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, "allowance">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "allowance", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, "balanceOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, "decimals">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "decimals", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, "name">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20Nonces<
  TSelectData = ReadContractResult<typeof erc20ABI, "nonces">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "nonces", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "nonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, "symbol">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, "totalSupply">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, "approve">({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20Permit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, "permit">({
    abi: erc20ABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, "transfer">({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, "transferFrom">({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link myTokenABI}__.
 */
export function useMyToken(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: myTokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__.
 */
export function useMyTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof myTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: myTokenABI,
    ...config,
  } as UseContractReadConfig<typeof myTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMyTokenDomainSeparator<
  TSelectData = ReadContractResult<typeof myTokenABI, "DOMAIN_SEPARATOR">,
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof myTokenABI, "DOMAIN_SEPARATOR", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useMyTokenAllowance<
  TSelectData = ReadContractResult<typeof myTokenABI, "allowance">,
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, "allowance", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof myTokenABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMyTokenBalanceOf<
  TSelectData = ReadContractResult<typeof myTokenABI, "balanceOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof myTokenABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useMyTokenDecimals<
  TSelectData = ReadContractResult<typeof myTokenABI, "decimals">,
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, "decimals", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof myTokenABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMyTokenName<
  TSelectData = ReadContractResult<typeof myTokenABI, "name">,
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof myTokenABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function useMyTokenNonces<
  TSelectData = ReadContractResult<typeof myTokenABI, "nonces">,
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, "nonces", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof myTokenABI, "nonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMyTokenSymbol<
  TSelectData = ReadContractResult<typeof myTokenABI, "symbol">,
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof myTokenABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMyTokenTotalSupply<
  TSelectData = ReadContractResult<typeof myTokenABI, "totalSupply">,
>(
  config: Omit<
    UseContractReadConfig<typeof myTokenABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: myTokenABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof myTokenABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__.
 */
export function useMyTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof myTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof myTokenABI, TFunctionName>({
    abi: myTokenABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useMyTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof myTokenABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof myTokenABI, "approve">({
    abi: myTokenABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useMyTokenPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof myTokenABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof myTokenABI, "permit">({
    abi: myTokenABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useMyTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof myTokenABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof myTokenABI, "transfer">({
    abi: myTokenABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMyTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof myTokenABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof myTokenABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof myTokenABI, "transferFrom">({
    abi: myTokenABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__.
 */
export function usePrepareMyTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof myTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMyTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof myTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareMyTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof myTokenABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMyTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof myTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link myTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMyTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof myTokenABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: myTokenABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof myTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__.
 */
export function useMyTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: myTokenABI,
    ...config,
  } as UseContractEventConfig<typeof myTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMyTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof myTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link myTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMyTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof myTokenABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: myTokenABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof myTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link fixedPointMathLibABI}__.
 */
export function useFixedPointMathLib(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: fixedPointMathLibABI, ...config });
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link veloABI}__.
 */
export function useVelo(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: veloABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloABI}__.
 */
export function useVeloRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof veloABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof veloABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: veloABI, ...config } as UseContractReadConfig<
    typeof veloABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useVeloDomainSeparator<
  TSelectData = ReadContractResult<typeof veloABI, "DOMAIN_SEPARATOR">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof veloABI, "DOMAIN_SEPARATOR", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"allowance"`.
 */
export function useVeloAllowance<
  TSelectData = ReadContractResult<typeof veloABI, "allowance">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloABI, "allowance", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof veloABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useVeloBalanceOf<
  TSelectData = ReadContractResult<typeof veloABI, "balanceOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof veloABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"decimals"`.
 */
export function useVeloDecimals<
  TSelectData = ReadContractResult<typeof veloABI, "decimals">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloABI, "decimals", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof veloABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"name"`.
 */
export function useVeloName<
  TSelectData = ReadContractResult<typeof veloABI, "name">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof veloABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"nonces"`.
 */
export function useVeloNonces<
  TSelectData = ReadContractResult<typeof veloABI, "nonces">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloABI, "nonces", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof veloABI, "nonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"symbol"`.
 */
export function useVeloSymbol<
  TSelectData = ReadContractResult<typeof veloABI, "symbol">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof veloABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useVeloTotalSupply<
  TSelectData = ReadContractResult<typeof veloABI, "totalSupply">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof veloABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloABI}__.
 */
export function useVeloWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof veloABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloABI, TFunctionName>({
    abi: veloABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"approve"`.
 */
export function useVeloApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof veloABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloABI, "approve">({
    abi: veloABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"burn"`.
 */
export function useVeloBurn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof veloABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloABI, "burn">({
    abi: veloABI,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"mint"`.
 */
export function useVeloMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof veloABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloABI, "mint">({
    abi: veloABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"permit"`.
 */
export function useVeloPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof veloABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloABI, "permit">({
    abi: veloABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"transfer"`.
 */
export function useVeloTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof veloABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloABI, "transfer">({
    abi: veloABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useVeloTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof veloABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloABI, "transferFrom">({
    abi: veloABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloABI}__.
 */
export function usePrepareVeloWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareVeloApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareVeloBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloABI, "burn">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareVeloMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareVeloPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareVeloTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareVeloTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloABI}__.
 */
export function useVeloEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof veloABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({ abi: veloABI, ...config } as UseContractEventConfig<
    typeof veloABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloABI}__ and `eventName` set to `"Approval"`.
 */
export function useVeloApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof veloABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof veloABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloABI}__ and `eventName` set to `"Transfer"`.
 */
export function useVeloTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof veloABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof veloABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link safeTransferLibABI}__.
 */
export function useSafeTransferLib(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: safeTransferLibABI, ...config });
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link veloVaultABI}__.
 */
export function useVeloVault(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: veloVaultABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__.
 */
export function useVeloVaultRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof veloVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useVeloVaultDomainSeparator<
  TSelectData = ReadContractResult<typeof veloVaultABI, "DOMAIN_SEPARATOR">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "DOMAIN_SEPARATOR", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"allowance"`.
 */
export function useVeloVaultAllowance<
  TSelectData = ReadContractResult<typeof veloVaultABI, "allowance">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "allowance", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"asset"`.
 */
export function useVeloVaultAsset<
  TSelectData = ReadContractResult<typeof veloVaultABI, "asset">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "asset", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "asset",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "asset", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useVeloVaultBalanceOf<
  TSelectData = ReadContractResult<typeof veloVaultABI, "balanceOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"convertToAssets"`.
 */
export function useVeloVaultConvertToAssets<
  TSelectData = ReadContractResult<typeof veloVaultABI, "convertToAssets">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "convertToAssets", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "convertToAssets",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "convertToAssets", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"convertToShares"`.
 */
export function useVeloVaultConvertToShares<
  TSelectData = ReadContractResult<typeof veloVaultABI, "convertToShares">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "convertToShares", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "convertToShares",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "convertToShares", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"decimals"`.
 */
export function useVeloVaultDecimals<
  TSelectData = ReadContractResult<typeof veloVaultABI, "decimals">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "decimals", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"maxDeposit"`.
 */
export function useVeloVaultMaxDeposit<
  TSelectData = ReadContractResult<typeof veloVaultABI, "maxDeposit">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "maxDeposit", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "maxDeposit",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "maxDeposit", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"maxMint"`.
 */
export function useVeloVaultMaxMint<
  TSelectData = ReadContractResult<typeof veloVaultABI, "maxMint">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "maxMint", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "maxMint",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "maxMint", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"maxRedeem"`.
 */
export function useVeloVaultMaxRedeem<
  TSelectData = ReadContractResult<typeof veloVaultABI, "maxRedeem">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "maxRedeem", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "maxRedeem",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "maxRedeem", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"maxWithdraw"`.
 */
export function useVeloVaultMaxWithdraw<
  TSelectData = ReadContractResult<typeof veloVaultABI, "maxWithdraw">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "maxWithdraw", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "maxWithdraw",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "maxWithdraw", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"name"`.
 */
export function useVeloVaultName<
  TSelectData = ReadContractResult<typeof veloVaultABI, "name">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"nonces"`.
 */
export function useVeloVaultNonces<
  TSelectData = ReadContractResult<typeof veloVaultABI, "nonces">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "nonces", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "nonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"owner"`.
 */
export function useVeloVaultOwner<
  TSelectData = ReadContractResult<typeof veloVaultABI, "owner">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "owner", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"previewDeposit"`.
 */
export function useVeloVaultPreviewDeposit<
  TSelectData = ReadContractResult<typeof veloVaultABI, "previewDeposit">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "previewDeposit", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "previewDeposit",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "previewDeposit", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"previewMint"`.
 */
export function useVeloVaultPreviewMint<
  TSelectData = ReadContractResult<typeof veloVaultABI, "previewMint">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "previewMint", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "previewMint",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "previewMint", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"previewRedeem"`.
 */
export function useVeloVaultPreviewRedeem<
  TSelectData = ReadContractResult<typeof veloVaultABI, "previewRedeem">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "previewRedeem", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "previewRedeem",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "previewRedeem", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"previewWithdraw"`.
 */
export function useVeloVaultPreviewWithdraw<
  TSelectData = ReadContractResult<typeof veloVaultABI, "previewWithdraw">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "previewWithdraw", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "previewWithdraw",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "previewWithdraw", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"rewardsDistributor"`.
 */
export function useVeloVaultRewardsDistributor<
  TSelectData = ReadContractResult<typeof veloVaultABI, "rewardsDistributor">,
>(
  config: Omit<
    UseContractReadConfig<
      typeof veloVaultABI,
      "rewardsDistributor",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "rewardsDistributor",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "rewardsDistributor", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useVeloVaultSupportsInterface<
  TSelectData = ReadContractResult<typeof veloVaultABI, "supportsInterface">,
>(
  config: Omit<
    UseContractReadConfig<
      typeof veloVaultABI,
      "supportsInterface",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "supportsInterface", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"symbol"`.
 */
export function useVeloVaultSymbol<
  TSelectData = ReadContractResult<typeof veloVaultABI, "symbol">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"totalAssets"`.
 */
export function useVeloVaultTotalAssets<
  TSelectData = ReadContractResult<typeof veloVaultABI, "totalAssets">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "totalAssets", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "totalAssets",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "totalAssets", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useVeloVaultTotalSupply<
  TSelectData = ReadContractResult<typeof veloVaultABI, "totalSupply">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"veNFTIds"`.
 */
export function useVeloVaultVeNftIds<
  TSelectData = ReadContractResult<typeof veloVaultABI, "veNFTIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "veNFTIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "veNFTIds",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "veNFTIds", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"velo"`.
 */
export function useVeloVaultVelo<
  TSelectData = ReadContractResult<typeof veloVaultABI, "velo">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "velo", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "velo",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "velo", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"voter"`.
 */
export function useVeloVaultVoter<
  TSelectData = ReadContractResult<typeof veloVaultABI, "voter">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "voter", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "voter",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "voter", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"votingEscrow"`.
 */
export function useVeloVaultVotingEscrow<
  TSelectData = ReadContractResult<typeof veloVaultABI, "votingEscrow">,
>(
  config: Omit<
    UseContractReadConfig<typeof veloVaultABI, "votingEscrow", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: veloVaultABI,
    functionName: "votingEscrow",
    ...config,
  } as UseContractReadConfig<typeof veloVaultABI, "votingEscrow", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__.
 */
export function useVeloVaultWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof veloVaultABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, TFunctionName>({
    abi: veloVaultABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"approve"`.
 */
export function useVeloVaultApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "approve">({
    abi: veloVaultABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"claimBribesMultiNFTs"`.
 */
export function useVeloVaultClaimBribesMultiNfTs<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof veloVaultABI,
          "claimBribesMultiNFTs"
        >["abi"],
        "claimBribesMultiNFTs"
      > & { functionName?: "claimBribesMultiNFTs" }
    : UseContractWriteConfig<
        TMode,
        typeof veloVaultABI,
        "claimBribesMultiNFTs"
      > & {
        abi?: never;
        functionName?: "claimBribesMultiNFTs";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "claimBribesMultiNFTs">({
    abi: veloVaultABI,
    functionName: "claimBribesMultiNFTs",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"claimFeesMultiNFTs"`.
 */
export function useVeloVaultClaimFeesMultiNfTs<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof veloVaultABI,
          "claimFeesMultiNFTs"
        >["abi"],
        "claimFeesMultiNFTs"
      > & { functionName?: "claimFeesMultiNFTs" }
    : UseContractWriteConfig<
        TMode,
        typeof veloVaultABI,
        "claimFeesMultiNFTs"
      > & {
        abi?: never;
        functionName?: "claimFeesMultiNFTs";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "claimFeesMultiNFTs">({
    abi: veloVaultABI,
    functionName: "claimFeesMultiNFTs",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"claimRebaseMultiNFTs"`.
 */
export function useVeloVaultClaimRebaseMultiNfTs<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof veloVaultABI,
          "claimRebaseMultiNFTs"
        >["abi"],
        "claimRebaseMultiNFTs"
      > & { functionName?: "claimRebaseMultiNFTs" }
    : UseContractWriteConfig<
        TMode,
        typeof veloVaultABI,
        "claimRebaseMultiNFTs"
      > & {
        abi?: never;
        functionName?: "claimRebaseMultiNFTs";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "claimRebaseMultiNFTs">({
    abi: veloVaultABI,
    functionName: "claimRebaseMultiNFTs",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"deposit"`.
 */
export function useVeloVaultDeposit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "deposit">["abi"],
        "deposit"
      > & { functionName?: "deposit" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "deposit"> & {
        abi?: never;
        functionName?: "deposit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "deposit">({
    abi: veloVaultABI,
    functionName: "deposit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"lockVELO"`.
 */
export function useVeloVaultLockVelo<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "lockVELO">["abi"],
        "lockVELO"
      > & { functionName?: "lockVELO" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "lockVELO"> & {
        abi?: never;
        functionName?: "lockVELO";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "lockVELO">({
    abi: veloVaultABI,
    functionName: "lockVELO",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"mint"`.
 */
export function useVeloVaultMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "mint">({
    abi: veloVaultABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useVeloVaultOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof veloVaultABI,
          "onERC721Received"
        >["abi"],
        "onERC721Received"
      > & { functionName?: "onERC721Received" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "onERC721Received"> & {
        abi?: never;
        functionName?: "onERC721Received";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "onERC721Received">({
    abi: veloVaultABI,
    functionName: "onERC721Received",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"permit"`.
 */
export function useVeloVaultPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "permit">({
    abi: veloVaultABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"redeem"`.
 */
export function useVeloVaultRedeem<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "redeem">["abi"],
        "redeem"
      > & { functionName?: "redeem" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "redeem"> & {
        abi?: never;
        functionName?: "redeem";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "redeem">({
    abi: veloVaultABI,
    functionName: "redeem",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"relockVELO"`.
 */
export function useVeloVaultRelockVelo<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "relockVELO">["abi"],
        "relockVELO"
      > & { functionName?: "relockVELO" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "relockVELO"> & {
        abi?: never;
        functionName?: "relockVELO";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "relockVELO">({
    abi: veloVaultABI,
    functionName: "relockVELO",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"removeERC20Tokens"`.
 */
export function useVeloVaultRemoveErc20Tokens<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof veloVaultABI,
          "removeERC20Tokens"
        >["abi"],
        "removeERC20Tokens"
      > & { functionName?: "removeERC20Tokens" }
    : UseContractWriteConfig<
        TMode,
        typeof veloVaultABI,
        "removeERC20Tokens"
      > & {
        abi?: never;
        functionName?: "removeERC20Tokens";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "removeERC20Tokens">({
    abi: veloVaultABI,
    functionName: "removeERC20Tokens",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"transfer"`.
 */
export function useVeloVaultTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "transfer">({
    abi: veloVaultABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useVeloVaultTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "transferFrom">({
    abi: veloVaultABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"transferNFTs"`.
 */
export function useVeloVaultTransferNfTs<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "transferNFTs">["abi"],
        "transferNFTs"
      > & { functionName?: "transferNFTs" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "transferNFTs"> & {
        abi?: never;
        functionName?: "transferNFTs";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "transferNFTs">({
    abi: veloVaultABI,
    functionName: "transferNFTs",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useVeloVaultTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof veloVaultABI,
          "transferOwnership"
        >["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        TMode,
        typeof veloVaultABI,
        "transferOwnership"
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "transferOwnership">({
    abi: veloVaultABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"vote"`.
 */
export function useVeloVaultVote<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "vote">["abi"],
        "vote"
      > & { functionName?: "vote" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "vote"> & {
        abi?: never;
        functionName?: "vote";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "vote">({
    abi: veloVaultABI,
    functionName: "vote",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"withdraw"`.
 */
export function useVeloVaultWithdraw<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "withdraw">["abi"],
        "withdraw"
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "withdraw"> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "withdraw">({
    abi: veloVaultABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"withdrawNFT"`.
 */
export function useVeloVaultWithdrawNft<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof veloVaultABI, "withdrawNFT">["abi"],
        "withdrawNFT"
      > & { functionName?: "withdrawNFT" }
    : UseContractWriteConfig<TMode, typeof veloVaultABI, "withdrawNFT"> & {
        abi?: never;
        functionName?: "withdrawNFT";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof veloVaultABI, "withdrawNFT">({
    abi: veloVaultABI,
    functionName: "withdrawNFT",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__.
 */
export function usePrepareVeloVaultWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareVeloVaultApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"claimBribesMultiNFTs"`.
 */
export function usePrepareVeloVaultClaimBribesMultiNfTs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "claimBribesMultiNFTs">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "claimBribesMultiNFTs",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "claimBribesMultiNFTs">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"claimFeesMultiNFTs"`.
 */
export function usePrepareVeloVaultClaimFeesMultiNfTs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "claimFeesMultiNFTs">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "claimFeesMultiNFTs",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "claimFeesMultiNFTs">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"claimRebaseMultiNFTs"`.
 */
export function usePrepareVeloVaultClaimRebaseMultiNfTs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "claimRebaseMultiNFTs">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "claimRebaseMultiNFTs",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "claimRebaseMultiNFTs">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareVeloVaultDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "deposit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "deposit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "deposit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"lockVELO"`.
 */
export function usePrepareVeloVaultLockVelo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "lockVELO">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "lockVELO",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "lockVELO">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareVeloVaultMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareVeloVaultOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "onERC721Received">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "onERC721Received",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "onERC721Received">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareVeloVaultPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"redeem"`.
 */
export function usePrepareVeloVaultRedeem(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "redeem">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "redeem",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "redeem">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"relockVELO"`.
 */
export function usePrepareVeloVaultRelockVelo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "relockVELO">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "relockVELO",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "relockVELO">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"removeERC20Tokens"`.
 */
export function usePrepareVeloVaultRemoveErc20Tokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "removeERC20Tokens">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "removeERC20Tokens",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "removeERC20Tokens">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareVeloVaultTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareVeloVaultTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"transferNFTs"`.
 */
export function usePrepareVeloVaultTransferNfTs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "transferNFTs">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "transferNFTs",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "transferNFTs">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareVeloVaultTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "transferOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareVeloVaultVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "vote">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "vote",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "vote">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareVeloVaultWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "withdraw">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link veloVaultABI}__ and `functionName` set to `"withdrawNFT"`.
 */
export function usePrepareVeloVaultWithdrawNft(
  config: Omit<
    UsePrepareContractWriteConfig<typeof veloVaultABI, "withdrawNFT">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: veloVaultABI,
    functionName: "withdrawNFT",
    ...config,
  } as UsePrepareContractWriteConfig<typeof veloVaultABI, "withdrawNFT">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__.
 */
export function useVeloVaultEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"Approval"`.
 */
export function useVeloVaultApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"ClaimedBribes"`.
 */
export function useVeloVaultClaimedBribesEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "ClaimedBribes">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "ClaimedBribes",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "ClaimedBribes">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"ClaimedFees"`.
 */
export function useVeloVaultClaimedFeesEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "ClaimedFees">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "ClaimedFees",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "ClaimedFees">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"ClaimedRebases"`.
 */
export function useVeloVaultClaimedRebasesEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "ClaimedRebases">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "ClaimedRebases",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "ClaimedRebases">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"Deposit"`.
 */
export function useVeloVaultDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "Deposit">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "Deposit",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "Deposit">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"GenerateVeNFT"`.
 */
export function useVeloVaultGenerateVeNftEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "GenerateVeNFT">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "GenerateVeNFT",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "GenerateVeNFT">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"NFTVoted"`.
 */
export function useVeloVaultNftVotedEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "NFTVoted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "NFTVoted",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "NFTVoted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useVeloVaultOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"RelockVeNFT"`.
 */
export function useVeloVaultRelockVeNftEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "RelockVeNFT">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "RelockVeNFT",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "RelockVeNFT">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"RemoveExcessTokens"`.
 */
export function useVeloVaultRemoveExcessTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "RemoveExcessTokens">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "RemoveExcessTokens",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "RemoveExcessTokens">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"Transfer"`.
 */
export function useVeloVaultTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "Transfer">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useVeloVaultWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "Withdraw">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "Withdraw",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "Withdraw">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link veloVaultABI}__ and `eventName` set to `"WithdrawVeNFT"`.
 */
export function useVeloVaultWithdrawVeNftEvent(
  config: Omit<
    UseContractEventConfig<typeof veloVaultABI, "WithdrawVeNFT">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: veloVaultABI,
    eventName: "WithdrawVeNFT",
    ...config,
  } as UseContractEventConfig<typeof veloVaultABI, "WithdrawVeNFT">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function useErc4626(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: erc4626ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function useErc4626Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc4626ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc4626DomainSeparator<
  TSelectData = ReadContractResult<typeof erc4626ABI, "DOMAIN_SEPARATOR">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "DOMAIN_SEPARATOR", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc4626Allowance<
  TSelectData = ReadContractResult<typeof erc4626ABI, "allowance">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "allowance", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"asset"`.
 */
export function useErc4626Asset<
  TSelectData = ReadContractResult<typeof erc4626ABI, "asset">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "asset", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "asset",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "asset", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc4626BalanceOf<
  TSelectData = ReadContractResult<typeof erc4626ABI, "balanceOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"convertToAssets"`.
 */
export function useErc4626ConvertToAssets<
  TSelectData = ReadContractResult<typeof erc4626ABI, "convertToAssets">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "convertToAssets", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "convertToAssets",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "convertToAssets", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"convertToShares"`.
 */
export function useErc4626ConvertToShares<
  TSelectData = ReadContractResult<typeof erc4626ABI, "convertToShares">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "convertToShares", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "convertToShares",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "convertToShares", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc4626Decimals<
  TSelectData = ReadContractResult<typeof erc4626ABI, "decimals">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "decimals", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"maxDeposit"`.
 */
export function useErc4626MaxDeposit<
  TSelectData = ReadContractResult<typeof erc4626ABI, "maxDeposit">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "maxDeposit", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "maxDeposit",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "maxDeposit", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"maxMint"`.
 */
export function useErc4626MaxMint<
  TSelectData = ReadContractResult<typeof erc4626ABI, "maxMint">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "maxMint", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "maxMint",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "maxMint", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"maxRedeem"`.
 */
export function useErc4626MaxRedeem<
  TSelectData = ReadContractResult<typeof erc4626ABI, "maxRedeem">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "maxRedeem", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "maxRedeem",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "maxRedeem", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"maxWithdraw"`.
 */
export function useErc4626MaxWithdraw<
  TSelectData = ReadContractResult<typeof erc4626ABI, "maxWithdraw">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "maxWithdraw", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "maxWithdraw",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "maxWithdraw", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"name"`.
 */
export function useErc4626Name<
  TSelectData = ReadContractResult<typeof erc4626ABI, "name">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc4626Nonces<
  TSelectData = ReadContractResult<typeof erc4626ABI, "nonces">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "nonces", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "nonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"previewDeposit"`.
 */
export function useErc4626PreviewDeposit<
  TSelectData = ReadContractResult<typeof erc4626ABI, "previewDeposit">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "previewDeposit", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "previewDeposit",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "previewDeposit", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"previewMint"`.
 */
export function useErc4626PreviewMint<
  TSelectData = ReadContractResult<typeof erc4626ABI, "previewMint">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "previewMint", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "previewMint",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "previewMint", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"previewRedeem"`.
 */
export function useErc4626PreviewRedeem<
  TSelectData = ReadContractResult<typeof erc4626ABI, "previewRedeem">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "previewRedeem", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "previewRedeem",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "previewRedeem", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"previewWithdraw"`.
 */
export function useErc4626PreviewWithdraw<
  TSelectData = ReadContractResult<typeof erc4626ABI, "previewWithdraw">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "previewWithdraw", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "previewWithdraw",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "previewWithdraw", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc4626Symbol<
  TSelectData = ReadContractResult<typeof erc4626ABI, "symbol">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"totalAssets"`.
 */
export function useErc4626TotalAssets<
  TSelectData = ReadContractResult<typeof erc4626ABI, "totalAssets">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "totalAssets", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "totalAssets",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "totalAssets", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc4626TotalSupply<
  TSelectData = ReadContractResult<typeof erc4626ABI, "totalSupply">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function useErc4626Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc4626ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, TFunctionName>({
    abi: erc4626ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc4626Approve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, "approve">({
    abi: erc4626ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"deposit"`.
 */
export function useErc4626Deposit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, "deposit">["abi"],
        "deposit"
      > & { functionName?: "deposit" }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, "deposit"> & {
        abi?: never;
        functionName?: "deposit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, "deposit">({
    abi: erc4626ABI,
    functionName: "deposit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"mint"`.
 */
export function useErc4626Mint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, "mint">({
    abi: erc4626ABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"permit"`.
 */
export function useErc4626Permit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, "permit">({
    abi: erc4626ABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"redeem"`.
 */
export function useErc4626Redeem<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, "redeem">["abi"],
        "redeem"
      > & { functionName?: "redeem" }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, "redeem"> & {
        abi?: never;
        functionName?: "redeem";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, "redeem">({
    abi: erc4626ABI,
    functionName: "redeem",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc4626Transfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, "transfer">({
    abi: erc4626ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc4626TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, "transferFrom">({
    abi: erc4626ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"withdraw"`.
 */
export function useErc4626Withdraw<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, "withdraw">["abi"],
        "withdraw"
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, "withdraw"> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, "withdraw">({
    abi: erc4626ABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function usePrepareErc4626Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc4626Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareErc4626Deposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, "deposit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: "deposit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, "deposit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareErc4626Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc4626Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"redeem"`.
 */
export function usePrepareErc4626Redeem(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, "redeem">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: "redeem",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, "redeem">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc4626Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc4626TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareErc4626Withdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, "withdraw">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function useErc4626Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc4626ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__ and `eventName` set to `"Deposit"`.
 */
export function useErc4626DepositEvent(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, "Deposit">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    eventName: "Deposit",
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, "Deposit">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc4626TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, "Transfer">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useErc4626WithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, "Withdraw">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    eventName: "Withdraw",
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, "Withdraw">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link commonBaseABI}__.
 */
export function useCommonBase(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: commonBaseABI, ...config });
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link scriptBaseABI}__.
 */
export function useScriptBase(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: scriptBaseABI, ...config });
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link testBaseABI}__.
 */
export function useTestBase(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: testBaseABI, ...config });
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdChainsABI}__.
 */
export function useStdChains(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: stdChainsABI, ...config });
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iRewardsDistributorABI}__.
 */
export function useIRewardsDistributor(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: iRewardsDistributorABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRewardsDistributorABI}__.
 */
export function useIRewardsDistributorWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRewardsDistributorABI,
          string
        >["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iRewardsDistributorABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRewardsDistributorABI, TFunctionName>({
    abi: iRewardsDistributorABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRewardsDistributorABI}__ and `functionName` set to `"claim_many"`.
 */
export function useIRewardsDistributorClaimMany<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iRewardsDistributorABI,
          "claim_many"
        >["abi"],
        "claim_many"
      > & { functionName?: "claim_many" }
    : UseContractWriteConfig<
        TMode,
        typeof iRewardsDistributorABI,
        "claim_many"
      > & {
        abi?: never;
        functionName?: "claim_many";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iRewardsDistributorABI, "claim_many">({
    abi: iRewardsDistributorABI,
    functionName: "claim_many",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRewardsDistributorABI}__.
 */
export function usePrepareIRewardsDistributorWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRewardsDistributorABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRewardsDistributorABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRewardsDistributorABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRewardsDistributorABI}__ and `functionName` set to `"claim_many"`.
 */
export function usePrepareIRewardsDistributorClaimMany(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRewardsDistributorABI, "claim_many">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRewardsDistributorABI,
    functionName: "claim_many",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRewardsDistributorABI, "claim_many">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iVoterABI}__.
 */
export function useIVoter(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: iVoterABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVoterABI}__.
 */
export function useIVoterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVoterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVoterABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: iVoterABI, ...config } as UseContractReadConfig<
    typeof iVoterABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"_ve"`.
 */
export function useIVoterVe<
  TSelectData = ReadContractResult<typeof iVoterABI, "_ve">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVoterABI, "_ve", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVoterABI,
    functionName: "_ve",
    ...config,
  } as UseContractReadConfig<typeof iVoterABI, "_ve", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"emergencyCouncil"`.
 */
export function useIVoterEmergencyCouncil<
  TSelectData = ReadContractResult<typeof iVoterABI, "emergencyCouncil">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVoterABI, "emergencyCouncil", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVoterABI,
    functionName: "emergencyCouncil",
    ...config,
  } as UseContractReadConfig<typeof iVoterABI, "emergencyCouncil", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"gauges"`.
 */
export function useIVoterGauges<
  TSelectData = ReadContractResult<typeof iVoterABI, "gauges">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVoterABI, "gauges", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVoterABI,
    functionName: "gauges",
    ...config,
  } as UseContractReadConfig<typeof iVoterABI, "gauges", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"governor"`.
 */
export function useIVoterGovernor<
  TSelectData = ReadContractResult<typeof iVoterABI, "governor">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVoterABI, "governor", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVoterABI,
    functionName: "governor",
    ...config,
  } as UseContractReadConfig<typeof iVoterABI, "governor", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"isWhitelisted"`.
 */
export function useIVoterIsWhitelisted<
  TSelectData = ReadContractResult<typeof iVoterABI, "isWhitelisted">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVoterABI, "isWhitelisted", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVoterABI,
    functionName: "isWhitelisted",
    ...config,
  } as UseContractReadConfig<typeof iVoterABI, "isWhitelisted", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__.
 */
export function useIVoterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVoterABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iVoterABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, TFunctionName>({
    abi: iVoterABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"attachTokenToGauge"`.
 */
export function useIVoterAttachTokenToGauge<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVoterABI,
          "attachTokenToGauge"
        >["abi"],
        "attachTokenToGauge"
      > & { functionName?: "attachTokenToGauge" }
    : UseContractWriteConfig<TMode, typeof iVoterABI, "attachTokenToGauge"> & {
        abi?: never;
        functionName?: "attachTokenToGauge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "attachTokenToGauge">({
    abi: iVoterABI,
    functionName: "attachTokenToGauge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"claimBribes"`.
 */
export function useIVoterClaimBribes<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVoterABI, "claimBribes">["abi"],
        "claimBribes"
      > & { functionName?: "claimBribes" }
    : UseContractWriteConfig<TMode, typeof iVoterABI, "claimBribes"> & {
        abi?: never;
        functionName?: "claimBribes";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "claimBribes">({
    abi: iVoterABI,
    functionName: "claimBribes",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"claimFees"`.
 */
export function useIVoterClaimFees<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVoterABI, "claimFees">["abi"],
        "claimFees"
      > & { functionName?: "claimFees" }
    : UseContractWriteConfig<TMode, typeof iVoterABI, "claimFees"> & {
        abi?: never;
        functionName?: "claimFees";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "claimFees">({
    abi: iVoterABI,
    functionName: "claimFees",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"detachTokenFromGauge"`.
 */
export function useIVoterDetachTokenFromGauge<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVoterABI,
          "detachTokenFromGauge"
        >["abi"],
        "detachTokenFromGauge"
      > & { functionName?: "detachTokenFromGauge" }
    : UseContractWriteConfig<
        TMode,
        typeof iVoterABI,
        "detachTokenFromGauge"
      > & {
        abi?: never;
        functionName?: "detachTokenFromGauge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "detachTokenFromGauge">({
    abi: iVoterABI,
    functionName: "detachTokenFromGauge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"distribute"`.
 */
export function useIVoterDistribute<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVoterABI, "distribute">["abi"],
        "distribute"
      > & { functionName?: "distribute" }
    : UseContractWriteConfig<TMode, typeof iVoterABI, "distribute"> & {
        abi?: never;
        functionName?: "distribute";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "distribute">({
    abi: iVoterABI,
    functionName: "distribute",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"emitDeposit"`.
 */
export function useIVoterEmitDeposit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVoterABI, "emitDeposit">["abi"],
        "emitDeposit"
      > & { functionName?: "emitDeposit" }
    : UseContractWriteConfig<TMode, typeof iVoterABI, "emitDeposit"> & {
        abi?: never;
        functionName?: "emitDeposit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "emitDeposit">({
    abi: iVoterABI,
    functionName: "emitDeposit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"emitWithdraw"`.
 */
export function useIVoterEmitWithdraw<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVoterABI, "emitWithdraw">["abi"],
        "emitWithdraw"
      > & { functionName?: "emitWithdraw" }
    : UseContractWriteConfig<TMode, typeof iVoterABI, "emitWithdraw"> & {
        abi?: never;
        functionName?: "emitWithdraw";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "emitWithdraw">({
    abi: iVoterABI,
    functionName: "emitWithdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function useIVoterNotifyRewardAmount<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVoterABI,
          "notifyRewardAmount"
        >["abi"],
        "notifyRewardAmount"
      > & { functionName?: "notifyRewardAmount" }
    : UseContractWriteConfig<TMode, typeof iVoterABI, "notifyRewardAmount"> & {
        abi?: never;
        functionName?: "notifyRewardAmount";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "notifyRewardAmount">({
    abi: iVoterABI,
    functionName: "notifyRewardAmount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"reset"`.
 */
export function useIVoterReset<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVoterABI, "reset">["abi"],
        "reset"
      > & { functionName?: "reset" }
    : UseContractWriteConfig<TMode, typeof iVoterABI, "reset"> & {
        abi?: never;
        functionName?: "reset";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "reset">({
    abi: iVoterABI,
    functionName: "reset",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"vote"`.
 */
export function useIVoterVote<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVoterABI, "vote">["abi"],
        "vote"
      > & { functionName?: "vote" }
    : UseContractWriteConfig<TMode, typeof iVoterABI, "vote"> & {
        abi?: never;
        functionName?: "vote";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVoterABI, "vote">({
    abi: iVoterABI,
    functionName: "vote",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__.
 */
export function usePrepareIVoterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"attachTokenToGauge"`.
 */
export function usePrepareIVoterAttachTokenToGauge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "attachTokenToGauge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "attachTokenToGauge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "attachTokenToGauge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"claimBribes"`.
 */
export function usePrepareIVoterClaimBribes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "claimBribes">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "claimBribes",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "claimBribes">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"claimFees"`.
 */
export function usePrepareIVoterClaimFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "claimFees">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "claimFees",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "claimFees">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"detachTokenFromGauge"`.
 */
export function usePrepareIVoterDetachTokenFromGauge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "detachTokenFromGauge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "detachTokenFromGauge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "detachTokenFromGauge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"distribute"`.
 */
export function usePrepareIVoterDistribute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "distribute">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "distribute",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "distribute">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"emitDeposit"`.
 */
export function usePrepareIVoterEmitDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "emitDeposit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "emitDeposit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "emitDeposit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"emitWithdraw"`.
 */
export function usePrepareIVoterEmitWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "emitWithdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "emitWithdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "emitWithdraw">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function usePrepareIVoterNotifyRewardAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "notifyRewardAmount">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "notifyRewardAmount",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "notifyRewardAmount">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"reset"`.
 */
export function usePrepareIVoterReset(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "reset">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "reset",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "reset">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVoterABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareIVoterVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVoterABI, "vote">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVoterABI,
    functionName: "vote",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVoterABI, "vote">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwned(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: ownedABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwnedRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownedABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownedABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: ownedABI, ...config } as UseContractReadConfig<
    typeof ownedABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnedOwner<
  TSelectData = ReadContractResult<typeof ownedABI, "owner">,
>(
  config: Omit<
    UseContractReadConfig<typeof ownedABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ownedABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof ownedABI, "owner", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwnedWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownedABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownedABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownedABI, TFunctionName>({
    abi: ownedABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnedTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownedABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof ownedABI, "transferOwnership"> & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownedABI, "transferOwnership">({
    abi: ownedABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedABI}__.
 */
export function usePrepareOwnedWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownedABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownedABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownedABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnedTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownedABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownedABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownedABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwnedEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownedABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownedABI,
    ...config,
  } as UseContractEventConfig<typeof ownedABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnedOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownedABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownedABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof ownedABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iVotingEscrowABI}__.
 */
export function useIVotingEscrow(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: iVotingEscrowABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__.
 */
export function useIVotingEscrowRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVotingEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotingEscrowABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"balanceOfNFT"`.
 */
export function useIVotingEscrowBalanceOfNft<
  TSelectData = ReadContractResult<typeof iVotingEscrowABI, "balanceOfNFT">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotingEscrowABI, "balanceOfNFT", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    functionName: "balanceOfNFT",
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, "balanceOfNFT", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"epoch"`.
 */
export function useIVotingEscrowEpoch<
  TSelectData = ReadContractResult<typeof iVotingEscrowABI, "epoch">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotingEscrowABI, "epoch", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    functionName: "epoch",
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, "epoch", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"isApprovedOrOwner"`.
 */
export function useIVotingEscrowIsApprovedOrOwner<
  TSelectData = ReadContractResult<
    typeof iVotingEscrowABI,
    "isApprovedOrOwner"
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotingEscrowABI,
      "isApprovedOrOwner",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    functionName: "isApprovedOrOwner",
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, "isApprovedOrOwner", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIVotingEscrowOwnerOf<
  TSelectData = ReadContractResult<typeof iVotingEscrowABI, "ownerOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotingEscrowABI, "ownerOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    functionName: "ownerOf",
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, "ownerOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"point_history"`.
 */
export function useIVotingEscrowPointHistory<
  TSelectData = ReadContractResult<typeof iVotingEscrowABI, "point_history">,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotingEscrowABI,
      "point_history",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    functionName: "point_history",
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, "point_history", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"token"`.
 */
export function useIVotingEscrowToken<
  TSelectData = ReadContractResult<typeof iVotingEscrowABI, "token">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotingEscrowABI, "token", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    functionName: "token",
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, "token", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIVotingEscrowTotalSupply<
  TSelectData = ReadContractResult<typeof iVotingEscrowABI, "totalSupply">,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotingEscrowABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"user_point_epoch"`.
 */
export function useIVotingEscrowUserPointEpoch<
  TSelectData = ReadContractResult<typeof iVotingEscrowABI, "user_point_epoch">,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotingEscrowABI,
      "user_point_epoch",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    functionName: "user_point_epoch",
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, "user_point_epoch", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"user_point_history"`.
 */
export function useIVotingEscrowUserPointHistory<
  TSelectData = ReadContractResult<
    typeof iVotingEscrowABI,
    "user_point_history"
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotingEscrowABI,
      "user_point_history",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iVotingEscrowABI,
    functionName: "user_point_history",
    ...config,
  } as UseContractReadConfig<typeof iVotingEscrowABI, "user_point_history", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__.
 */
export function useIVotingEscrowWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotingEscrowABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, TFunctionName>({
    abi: iVotingEscrowABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"abstain"`.
 */
export function useIVotingEscrowAbstain<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotingEscrowABI, "abstain">["abi"],
        "abstain"
      > & { functionName?: "abstain" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "abstain"> & {
        abi?: never;
        functionName?: "abstain";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "abstain">({
    abi: iVotingEscrowABI,
    functionName: "abstain",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"attach"`.
 */
export function useIVotingEscrowAttach<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotingEscrowABI, "attach">["abi"],
        "attach"
      > & { functionName?: "attach" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "attach"> & {
        abi?: never;
        functionName?: "attach";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "attach">({
    abi: iVotingEscrowABI,
    functionName: "attach",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"checkpoint"`.
 */
export function useIVotingEscrowCheckpoint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVotingEscrowABI,
          "checkpoint"
        >["abi"],
        "checkpoint"
      > & { functionName?: "checkpoint" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "checkpoint"> & {
        abi?: never;
        functionName?: "checkpoint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "checkpoint">({
    abi: iVotingEscrowABI,
    functionName: "checkpoint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"create_lock"`.
 */
export function useIVotingEscrowCreateLock<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVotingEscrowABI,
          "create_lock"
        >["abi"],
        "create_lock"
      > & { functionName?: "create_lock" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "create_lock"> & {
        abi?: never;
        functionName?: "create_lock";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "create_lock">({
    abi: iVotingEscrowABI,
    functionName: "create_lock",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"create_lock_for"`.
 */
export function useIVotingEscrowCreateLockFor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVotingEscrowABI,
          "create_lock_for"
        >["abi"],
        "create_lock_for"
      > & { functionName?: "create_lock_for" }
    : UseContractWriteConfig<
        TMode,
        typeof iVotingEscrowABI,
        "create_lock_for"
      > & {
        abi?: never;
        functionName?: "create_lock_for";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "create_lock_for">({
    abi: iVotingEscrowABI,
    functionName: "create_lock_for",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"deposit_for"`.
 */
export function useIVotingEscrowDepositFor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVotingEscrowABI,
          "deposit_for"
        >["abi"],
        "deposit_for"
      > & { functionName?: "deposit_for" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "deposit_for"> & {
        abi?: never;
        functionName?: "deposit_for";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "deposit_for">({
    abi: iVotingEscrowABI,
    functionName: "deposit_for",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"detach"`.
 */
export function useIVotingEscrowDetach<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotingEscrowABI, "detach">["abi"],
        "detach"
      > & { functionName?: "detach" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "detach"> & {
        abi?: never;
        functionName?: "detach";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "detach">({
    abi: iVotingEscrowABI,
    functionName: "detach",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"increase_unlock_time"`.
 */
export function useIVotingEscrowIncreaseUnlockTime<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVotingEscrowABI,
          "increase_unlock_time"
        >["abi"],
        "increase_unlock_time"
      > & { functionName?: "increase_unlock_time" }
    : UseContractWriteConfig<
        TMode,
        typeof iVotingEscrowABI,
        "increase_unlock_time"
      > & {
        abi?: never;
        functionName?: "increase_unlock_time";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iVotingEscrowABI,
    "increase_unlock_time"
  >({
    abi: iVotingEscrowABI,
    functionName: "increase_unlock_time",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIVotingEscrowSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVotingEscrowABI,
          "safeTransferFrom"
        >["abi"],
        "safeTransferFrom"
      > & { functionName?: "safeTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof iVotingEscrowABI,
        "safeTransferFrom"
      > & {
        abi?: never;
        functionName?: "safeTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "safeTransferFrom">({
    abi: iVotingEscrowABI,
    functionName: "safeTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"team"`.
 */
export function useIVotingEscrowTeam<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotingEscrowABI, "team">["abi"],
        "team"
      > & { functionName?: "team" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "team"> & {
        abi?: never;
        functionName?: "team";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "team">({
    abi: iVotingEscrowABI,
    functionName: "team",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIVotingEscrowTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVotingEscrowABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "transferFrom">({
    abi: iVotingEscrowABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"voting"`.
 */
export function useIVotingEscrowVoting<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotingEscrowABI, "voting">["abi"],
        "voting"
      > & { functionName?: "voting" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "voting"> & {
        abi?: never;
        functionName?: "voting";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "voting">({
    abi: iVotingEscrowABI,
    functionName: "voting",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"withdraw"`.
 */
export function useIVotingEscrowWithdraw<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotingEscrowABI, "withdraw">["abi"],
        "withdraw"
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<TMode, typeof iVotingEscrowABI, "withdraw"> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotingEscrowABI, "withdraw">({
    abi: iVotingEscrowABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__.
 */
export function usePrepareIVotingEscrowWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"abstain"`.
 */
export function usePrepareIVotingEscrowAbstain(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "abstain">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "abstain",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "abstain">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"attach"`.
 */
export function usePrepareIVotingEscrowAttach(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "attach">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "attach",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "attach">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"checkpoint"`.
 */
export function usePrepareIVotingEscrowCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "checkpoint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "checkpoint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "checkpoint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"create_lock"`.
 */
export function usePrepareIVotingEscrowCreateLock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "create_lock">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "create_lock",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "create_lock">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"create_lock_for"`.
 */
export function usePrepareIVotingEscrowCreateLockFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "create_lock_for">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "create_lock_for",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "create_lock_for">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"deposit_for"`.
 */
export function usePrepareIVotingEscrowDepositFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "deposit_for">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "deposit_for",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "deposit_for">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"detach"`.
 */
export function usePrepareIVotingEscrowDetach(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "detach">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "detach",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "detach">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"increase_unlock_time"`.
 */
export function usePrepareIVotingEscrowIncreaseUnlockTime(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iVotingEscrowABI,
      "increase_unlock_time"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "increase_unlock_time",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "increase_unlock_time">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIVotingEscrowSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "safeTransferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "safeTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "safeTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"team"`.
 */
export function usePrepareIVotingEscrowTeam(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "team">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "team",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "team">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIVotingEscrowTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"voting"`.
 */
export function usePrepareIVotingEscrowVoting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "voting">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "voting",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "voting">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotingEscrowABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareIVotingEscrowWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotingEscrowABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotingEscrowABI, "withdraw">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721TokenReceiverABI}__.
 */
export function useErc721TokenReceiver(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: erc721TokenReceiverABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__.
 */
export function useErc721TokenReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721TokenReceiverABI,
          string
        >["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721TokenReceiverABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721TokenReceiverABI, TFunctionName>({
    abi: erc721TokenReceiverABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useErc721TokenReceiverOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721TokenReceiverABI,
          "onERC721Received"
        >["abi"],
        "onERC721Received"
      > & { functionName?: "onERC721Received" }
    : UseContractWriteConfig<
        TMode,
        typeof erc721TokenReceiverABI,
        "onERC721Received"
      > & {
        abi?: never;
        functionName?: "onERC721Received";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721TokenReceiverABI,
    "onERC721Received"
  >({
    abi: erc721TokenReceiverABI,
    functionName: "onERC721Received",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__.
 */
export function usePrepareErc721TokenReceiverWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721TokenReceiverABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721TokenReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721TokenReceiverABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareErc721TokenReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721TokenReceiverABI,
      "onERC721Received"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721TokenReceiverABI,
    functionName: "onERC721Received",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721TokenReceiverABI, "onERC721Received">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: erc721ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
  TSelectData = ReadContractResult<typeof erc721ABI, "balanceOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TSelectData = ReadContractResult<typeof erc721ABI, "getApproved">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, "getApproved", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "getApproved",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, "getApproved", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc721ABI, "isApprovedForAll">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, "isApprovedForAll", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, "isApprovedForAll", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
  TSelectData = ReadContractResult<typeof erc721ABI, "name">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
  TSelectData = ReadContractResult<typeof erc721ABI, "ownerOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, "ownerOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "ownerOf",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, "ownerOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<
  TSelectData = ReadContractResult<typeof erc721ABI, "supportsInterface">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, "supportsInterface", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, "supportsInterface", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
  TSelectData = ReadContractResult<typeof erc721ABI, "symbol">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
  TSelectData = ReadContractResult<typeof erc721ABI, "tokenURI">,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, "tokenURI", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "tokenURI",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, "tokenURI", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc721ABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, "approve">({
    abi: erc721ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, "safeTransferFrom">["abi"],
        "safeTransferFrom"
      > & { functionName?: "safeTransferFrom" }
    : UseContractWriteConfig<TMode, typeof erc721ABI, "safeTransferFrom"> & {
        abi?: never;
        functionName?: "safeTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, "safeTransferFrom">({
    abi: erc721ABI,
    functionName: "safeTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721ABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<TMode, typeof erc721ABI, "setApprovalForAll"> & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, "setApprovalForAll">({
    abi: erc721ABI,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc721ABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, "transferFrom">({
    abi: erc721ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, "safeTransferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: "safeTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, "safeTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, "setApprovalForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: mockErc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMockErc20DomainSeparator<
  TSelectData = ReadContractResult<typeof mockErc20ABI, "DOMAIN_SEPARATOR">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, "DOMAIN_SEPARATOR", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useMockErc20Allowance<
  TSelectData = ReadContractResult<typeof mockErc20ABI, "allowance">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, "allowance", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockErc20BalanceOf<
  TSelectData = ReadContractResult<typeof mockErc20ABI, "balanceOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useMockErc20Decimals<
  TSelectData = ReadContractResult<typeof mockErc20ABI, "decimals">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, "decimals", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"name"`.
 */
export function useMockErc20Name<
  TSelectData = ReadContractResult<typeof mockErc20ABI, "name">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"nonces"`.
 */
export function useMockErc20Nonces<
  TSelectData = ReadContractResult<typeof mockErc20ABI, "nonces">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, "nonces", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, "nonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockErc20Symbol<
  TSelectData = ReadContractResult<typeof mockErc20ABI, "symbol">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockErc20TotalSupply<
  TSelectData = ReadContractResult<typeof mockErc20ABI, "totalSupply">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, TFunctionName>({
    abi: mockErc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useMockErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, "approve">({
    abi: mockErc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"burn"`.
 */
export function useMockErc20Burn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, "burn">({
    abi: mockErc20ABI,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function useMockErc20Mint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, "mint">({
    abi: mockErc20ABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function useMockErc20Permit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, "permit">({
    abi: mockErc20ABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useMockErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, "transfer">({
    abi: mockErc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, "transferFrom">({
    abi: mockErc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function usePrepareMockErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMockErc20Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "burn">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMockErc20Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareMockErc20Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMockErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockErc20ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc20ABI,
    ...config,
  } as UseContractEventConfig<typeof mockErc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mockErc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof mockErc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockErc721ABI}__.
 */
export function useMockErc721(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: mockErc721ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__.
 */
export function useMockErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockErc721BalanceOf<
  TSelectData = ReadContractResult<typeof mockErc721ABI, "balanceOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useMockErc721GetApproved<
  TSelectData = ReadContractResult<typeof mockErc721ABI, "getApproved">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, "getApproved", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: "getApproved",
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, "getApproved", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMockErc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof mockErc721ABI, "isApprovedForAll">,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockErc721ABI,
      "isApprovedForAll",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, "isApprovedForAll", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"name"`.
 */
export function useMockErc721Name<
  TSelectData = ReadContractResult<typeof mockErc721ABI, "name">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useMockErc721OwnerOf<
  TSelectData = ReadContractResult<typeof mockErc721ABI, "ownerOf">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, "ownerOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: "ownerOf",
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, "ownerOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMockErc721SupportsInterface<
  TSelectData = ReadContractResult<typeof mockErc721ABI, "supportsInterface">,
>(
  config: Omit<
    UseContractReadConfig<
      typeof mockErc721ABI,
      "supportsInterface",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, "supportsInterface", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockErc721Symbol<
  TSelectData = ReadContractResult<typeof mockErc721ABI, "symbol">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useMockErc721TokenUri<
  TSelectData = ReadContractResult<typeof mockErc721ABI, "tokenURI">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, "tokenURI", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: "tokenURI",
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, "tokenURI", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__.
 */
export function useMockErc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc721ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof mockErc721ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc721ABI, TFunctionName>({
    abi: mockErc721ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useMockErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc721ABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof mockErc721ABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc721ABI, "approve">({
    abi: mockErc721ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"burn"`.
 */
export function useMockErc721Burn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc721ABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof mockErc721ABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc721ABI, "burn">({
    abi: mockErc721ABI,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"mint"`.
 */
export function useMockErc721Mint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc721ABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof mockErc721ABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc721ABI, "mint">({
    abi: mockErc721ABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"safeMint"`.
 */
export function useMockErc721SafeMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc721ABI, "safeMint">["abi"],
        "safeMint"
      > & { functionName?: "safeMint" }
    : UseContractWriteConfig<TMode, typeof mockErc721ABI, "safeMint"> & {
        abi?: never;
        functionName?: "safeMint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc721ABI, "safeMint">({
    abi: mockErc721ABI,
    functionName: "safeMint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useMockErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          "safeTransferFrom"
        >["abi"],
        "safeTransferFrom"
      > & { functionName?: "safeTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof mockErc721ABI,
        "safeTransferFrom"
      > & {
        abi?: never;
        functionName?: "safeTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc721ABI, "safeTransferFrom">({
    abi: mockErc721ABI,
    functionName: "safeTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMockErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof mockErc721ABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc721ABI, "setApprovalForAll">({
    abi: mockErc721ABI,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc721ABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof mockErc721ABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc721ABI, "transferFrom">({
    abi: mockErc721ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__.
 */
export function usePrepareMockErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMockErc721Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, "burn">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMockErc721Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareMockErc721SafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, "safeMint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: "safeMint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, "safeMint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareMockErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, "safeTransferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: "safeTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, "safeTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMockErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, "setApprovalForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc721ABI}__.
 */
export function useMockErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockErc721ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc721ABI,
    ...config,
  } as UseContractEventConfig<typeof mockErc721ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc721ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc721ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mockErc721ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMockErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc721ABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc721ABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof mockErc721ABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc721ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc721ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof mockErc721ABI, "Transfer">);
}
